"""
Напишите функцию, которая принимает список любых данных (строки, числа, списки, словари) и возвращает их строковое
представление, объединённое через " | ". Добавьте документацию и аннотации типов для всех параметров и возвращаемого
значения.
Пример вывода: 42 | hello | [1, 2, 3] | {'a': 1, 'b': 2}
"""

from typing import Any, List, Dict

data = [42, "hello", [1, 2, 3], {"a": 1, "b": 2}]

def processing(txt: List[Any]) -> str:
    """
    Принимает список любых данных (строки, числа, списки, словари и т.д.)
    и возвращает их строковое представление, объединённое через " | ".

    :param txt: Список элементов любых типов.
    :return: Строка с объединёнными строковыми представлениями элементов через " | ".
    """
    return " | ".join(str(word) for word in txt)

print(processing(data))
#help(processing)

"""
Напишите функцию, которая принимает список словарей, где каждый словарь содержит имя пользователя и список баллов. 
Функция должна вернуть сумму всех чисел. Добавьте документацию и аннотации типов для всех параметров и возвращаемого 
значения.
Пример вывода: Итоговый балл: 156
"""

data = [
    {"name": "Alice", "scores": [10, 20, 30]},
    {"name": "Bob", "scores": [5, 15, 25]},
    {"name": "Charlie", "scores": [7, 17, 27]}
]

def final_score(users: List[Dict[str, List[int]]]) -> int:
    """
    Принимает список словарей, содержащих имя пользователя и список его баллов.
    Возвращает сумму всех баллов.

    :param users: Список словарей с ключами 'name' и 'scores'.
    :return: Сумма всех чисел из всех списков 'scores'.
    """
    return sum(map(lambda user: sum(user["scores"]), users))

print(f"Итоговый балл: {final_score(data)}")

